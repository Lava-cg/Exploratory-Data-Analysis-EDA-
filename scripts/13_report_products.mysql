/*
===============================================================================
Product Report
===============================================================================
Purpose:
    - This report consolidates key product metrics and behaviors.

Highlights:
    1. Gathers essential fields such as product name, category, subcategory, and cost.
    2. Segments products by revenue to identify High-Performers, Mid-Range, or Low-Performers.
    3. Aggregates product-level metrics:
       - total orders
       - total sales
       - total quantity sold
       - total customers (unique)
       - lifespan (in months)
    4. Calculates valuable KPIs:
       - recency (months since last sale)
       - average order revenue (AOR)
       - average monthly revenue
===============================================================================
*/


-- 1) Base Query: Retrieves core columns from fact_sales and dim_products

CREATE VIEW gold_report_products AS
WITH basic_query AS (
SELECT
	    f.order_number,
        f.order_date,
		f.customer_key,
        f.sales_amount,
        f.quantity,
        p.product_key,
        p.product_name,
        p.category,
        p.subcategory,
        p.cost
    FROM gold_fact_sales f
    LEFT JOIN gold_dim_products p
	ON f.product_key = p.product_key
    WHERE order_date IS NOT NULL  -- only consider valid sales dates
)

-- 2) Product Aggregations: Summarizes key metrics at the product level

, product_aggregation AS (
SELECT  
	product_key,
	product_name,
	category,
	subcategory,
	cost,
timestampdiff(month, min(order_date), max(order_date)) life_span,
max(order_date) AS last_sale_date,
count(DISTINCT order_number) as total_orders,
sum(sales_amount) AS total_sales,
sum(quantity) AS total_quantity,
count(DISTINCT customer_key) AS total_customers,
round(avg(sales_amount/ coalesce( quantity, 0)) ) as avg_selling_price,
max(order_date) AS last_order_date
from basic_query
GROUP BY
product_key,
product_name,
category,
subcategory,
cost
)


SELECT 
product_key,
product_name,
category,
subcategory,
cost,
CASE WHEN total_sales > 5000 THEN  'High performer'
WHEN total_sales >= 1000 THEN 'Mid performer'
ELSE 'Low Performer' 
END product_segment,
life_span,
last_sale_date,
avg_selling_price,
last_order_date,

-- Average Order Revenue (AOR)

CASE WHEN total_orders = 0 THEN 0
ELSE ROUND(total_sales/total_orders) 
END AS avg_order_revenue,

-- Average Monthly Revenue

CASE WHEN total_sales = 0 THEN 0
ELSE ROUND(total_sales/life_span)
END AS avg_monthly_revenue

 from product_aggregation;
 
 
